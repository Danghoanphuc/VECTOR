# app.py
# File ch√≠nh, ch·ªâ ch·ª©a logic ƒë·ªÉ x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng v·ªõi Streamlit.

import streamlit as st
import os
import time
import datetime
from sentence_transformers import SentenceTransformer
from pinecone import Pinecone, ServerlessSpec
from dotenv import load_dotenv

# Import c√°c h√†m t·ª´ c√°c file ƒë√£ ƒë∆∞·ª£c t√°ch ra
import database as db
from config import (
    MODEL_NAME, 
    VECTOR_DIMENSION, 
    PINECONE_INDEX_NAME, 
    PINECONE_METRIC,
    PINECONE_CLOUD,
    PINECONE_REGION
)

# --- 1. C·∫§U H√åNH BAN ƒê·∫¶U ---

load_dotenv()
st.set_page_config(page_title="Qu·∫£n L√Ω D·ªãch V·ª• In ·∫§n", page_icon="üñ®Ô∏è", layout="wide")

st.title("üñ®Ô∏è H·ªá Th·ªëng Qu·∫£n L√Ω D·ªãch V·ª• In ·∫§n")
st.caption("N∆°i c·∫≠p nh·∫≠t ki·∫øn th·ª©c cho chatbot b√°n h√†ng c·ªßa b·∫°n. (Ki·∫øn tr√∫c ƒë√£ t√°i c·∫•u tr√∫c)")

# Kh·ªüi t·∫°o session_state ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i
if 'editing_note_id' not in st.session_state:
    st.session_state.editing_note_id = None
if 'category_filter' not in st.session_state:
    st.session_state.category_filter = "T·∫•t c·∫£"

# --- 2. T·∫¢I M√î H√åNH V√Ä K·∫æT N·ªêI PINECONE (S·ª≠ d·ª•ng cache c·ªßa Streamlit) ---

@st.cache_resource
def load_model():
    """T·∫£i m√¥ h√¨nh AI v√†o b·ªô nh·ªõ (ch·ªâ m·ªôt l·∫ßn)."""
    return SentenceTransformer(MODEL_NAME)

@st.cache_resource
def init_pinecone():
    """Kh·ªüi t·∫°o k·∫øt n·ªëi t·ªõi Pinecone (ch·ªâ m·ªôt l·∫ßn)."""
    api_key = os.getenv("PINECONE_API_KEY")
    if not api_key:
        st.error("Vui l√≤ng cung c·∫•p PINECONE_API_KEY trong file .env")
        st.stop()
    
    pc = Pinecone(api_key=api_key)
    if PINECONE_INDEX_NAME not in pc.list_indexes().names():
        st.warning(f"Index '{PINECONE_INDEX_NAME}' kh√¥ng t·ªìn t·∫°i. ƒêang t·∫°o m·ªõi...")
        pc.create_index(
            name=PINECONE_INDEX_NAME,
            dimension=VECTOR_DIMENSION,
            metric=PINECONE_METRIC,
            spec=ServerlessSpec(cloud=PINECONE_CLOUD, region=PINECONE_REGION) 
        )
        st.success("T·∫°o index m·ªõi th√†nh c√¥ng! Vui l√≤ng ch·ªù gi√¢y l√°t ƒë·ªÉ index kh·ªüi t·∫°o.")
        time.sleep(10)

    return pc.Index(PINECONE_INDEX_NAME)

try:
    with st.spinner("ƒêang t·∫£i t√†i nguy√™n v√† k·∫øt n·ªëi t·ªõi cloud..."):
        model = load_model()
        index = init_pinecone()
except Exception as e:
    st.error(f"ƒê√£ x·∫£y ra l·ªói kh·ªüi t·∫°o: {e}")
    st.stop()

# --- 3. GIAO DI·ªÜN DASHBOARD ---

all_notes_data = db.get_all_notes(index)

# Chu·∫©n b·ªã danh s√°ch danh m·ª•c cho c√°c form v√† b·ªô l·ªçc
all_categories_for_filter = ["T·∫•t c·∫£"] + sorted(list(set(note['metadata'].get('category', 'Ch∆∞a ph√¢n lo·∫°i') for note in all_notes_data)))
unique_categories_for_forms = sorted(list(set(note['metadata'].get('category') for note in all_notes_data if note['metadata'].get('category'))))
category_options_for_forms = unique_categories_for_forms + ["--- Th√™m danh m·ª•c m·ªõi ---"]

# --- THANH ƒêI·ªÄU H∆Ø·ªöNG B√äN TR√ÅI (SIDEBAR) ---
with st.sidebar:
    st.header("Th√™m D·ªãch V·ª• M·ªõi")
    with st.form("new_service_form"):
        service_name = st.text_input("T√™n D·ªãch V·ª• (*)")
        selected_category = st.selectbox("Danh M·ª•c (*)", options=category_options_for_forms, key="new_cat_select")
        
        new_category = ""
        if selected_category == "--- Th√™m danh m·ª•c m·ªõi ---":
            new_category = st.text_input("Nh·∫≠p t√™n danh m·ª•c m·ªõi:")
            
        description = st.text_area("M√¥ T·∫£ / Quy C√°ch")
        price_info = st.text_area("B·∫£ng Gi√°")
        tech_reqs = st.text_area("Y√™u C·∫ßu K·ªπ Thu·∫≠t")

        submitted = st.form_submit_button("L∆∞u D·ªãch V·ª• M·ªõi")
        if submitted:
            final_category = new_category.strip() if new_category else selected_category
            new_service_data = {
                "service_name": service_name,
                "category": final_category,
                "description": description,
                "price_info": price_info,
                "tech_reqs": tech_reqs
            }
            db.process_and_upsert(index, model, new_service_data)
            st.rerun()

    st.divider()
    st.header("B·ªô l·ªçc")
    st.session_state.category_filter = st.selectbox("L·ªçc theo danh m·ª•c:", options=all_categories_for_filter)

# --- KHU V·ª∞C HI·ªÇN TH·ªä CH√çNH ---
st.header("üîç T√¨m ki·∫øm th√¥ng minh (D√†nh cho Chatbot)")
search_query = st.text_input("Nh·∫≠p c√¢u h·ªèi c·ªßa kh√°ch h√†ng ƒë·ªÉ th·ª≠ nghi·ªám:", placeholder="VD: In 500 card visit gi√° bao nhi√™u?")
if search_query:
    with st.spinner("ƒêang t√¨m ki·∫øm tr√™n cloud..."):
        search_results_meta = db.search_notes(index, model, search_query)
    if search_results_meta:
        st.subheader("K·∫øt qu·∫£ ph√π h·ª£p nh·∫•t:")
        for meta in search_results_meta:
            with st.expander(f"**{meta.get('service_name')}** - Danh m·ª•c: {meta.get('category')}"):
                st.markdown(f"**M√¥ t·∫£:** {meta.get('description', 'N/A')}")
                st.markdown(f"**Gi√°:** {meta.get('price_info', 'N/A')}")
                st.markdown(f"**Y√™u c·∫ßu:** {meta.get('tech_reqs', 'N/A')}")
    else:
        st.write("Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.")

st.divider()

st.header(f"Danh s√°ch D·ªãch v·ª• ({st.session_state.category_filter})")

if all_notes_data:
    if st.session_state.category_filter == "T·∫•t c·∫£":
        filtered_notes = all_notes_data
    else:
        filtered_notes = [
            note for note in all_notes_data 
            if note['metadata'].get('category') == st.session_state.category_filter
        ]
    
    sorted_notes = sorted(filtered_notes, key=lambda x: x['metadata'].get('updated_at', '1970-01-01'), reverse=True)
    
    if not sorted_notes:
        st.info(f"Kh√¥ng c√≥ d·ªãch v·ª• n√†o trong danh m·ª•c '{st.session_state.category_filter}'.")
    
    for note in sorted_notes:
        note_id, meta = note['id'], note['metadata']
        
        with st.container(border=True):
            if st.session_state.editing_note_id == note_id:
                st.subheader(f"Ch·ªânh s·ª≠a: {meta.get('service_name')}")
                with st.form(f"edit_form_{note_id}"):
                    edited_service_name = st.text_input("T√™n D·ªãch V·ª• (*)", value=meta.get('service_name'))
                    
                    try:
                        current_category_index = category_options_for_forms.index(meta.get('category'))
                    except ValueError:
                        current_category_index = 0
                    
                    selected_category_edit = st.selectbox("Danh M·ª•c (*)", options=category_options_for_forms, index=current_category_index, key=f"cat_edit_{note_id}")
                    
                    new_category_edit = ""
                    if selected_category_edit == "--- Th√™m danh m·ª•c m·ªõi ---":
                        new_category_edit = st.text_input("Nh·∫≠p t√™n danh m·ª•c m·ªõi:", key=f"new_cat_edit_{note_id}")

                    edited_description = st.text_area("M√¥ T·∫£ / Quy C√°ch", value=meta.get('description'))
                    edited_price_info = st.text_area("B·∫£ng Gi√°", value=meta.get('price_info'))
                    edited_tech_reqs = st.text_area("Y√™u C·∫ßu K·ªπ Thu·∫≠t", value=meta.get('tech_reqs'))
                    
                    c1, c2 = st.columns(2)
                    with c1:
                        if st.form_submit_button("‚úÖ L∆∞u thay ƒë·ªïi", type="primary"):
                            final_category_edit = new_category_edit.strip() if new_category_edit else selected_category_edit
                            edited_data = {
                                "service_name": edited_service_name,
                                "category": final_category_edit,
                                "description": edited_description,
                                "price_info": edited_price_info,
                                "tech_reqs": edited_tech_reqs
                            }
                            db.process_and_upsert(index, model, edited_data, note_id)
                            st.rerun()
                    with c2:
                        if st.form_submit_button("‚ùå H·ªßy"):
                            st.session_state.editing_note_id = None
                            st.rerun()

            else:
                col1, col2 = st.columns([0.85, 0.15])
                with col1:
                    st.subheader(meta.get('service_name', 'Ch∆∞a c√≥ t√™n'))
                    st.markdown(f"**Danh m·ª•c:** `{meta.get('category', 'N/A')}`")
                    if meta.get('description'):
                        st.markdown(f"**M√¥ t·∫£:**\n{meta.get('description')}")
                    if meta.get('price_info'):
                        st.markdown(f"**Gi√°:**\n{meta.get('price_info')}")
                    if meta.get('tech_reqs'):
                        st.markdown(f"**Y√™u c·∫ßu:**\n{meta.get('tech_reqs')}")
                    
                    if meta.get('updated_at'):
                        updated_time = datetime.datetime.fromisoformat(meta.get('updated_at')).strftime('%H:%M, %d-%m-%Y')
                        st.caption(f"C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {updated_time}")
                
                with col2:
                    if st.button("S·ª≠a", key=f"edit_btn_{note_id}"):
                        st.session_state.editing_note_id = note_id
                        st.rerun()
                    if st.button("X√≥a", key=f"del_btn_{note_id}"):
                        db.delete_note_from_db(index, note_id)
                        st.rerun()

else:
    st.write("Ch∆∞a c√≥ d·ªãch v·ª• n√†o ƒë∆∞·ª£c th√™m v√†o. Vui l√≤ng s·ª≠ d·ª•ng form b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

